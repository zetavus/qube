// algorithms/search/grover_with_functions.qb
// 회로 내부 함수 호출 및 반복문 테스트

fn oracle_10101() {
    println("    🎯 Oracle 함수 실행중");
    apply X to q1;
    apply X to q3;
    apply CZ to (q0, q1, q2, q3, q4);
    apply X to q1;
    apply X to q3;
    println("    ✅ Oracle 완료");
}

fn diffusion() {
    println("    🔄 Diffusion 함수 실행중");
    apply H to ~;
    apply X to ~;
    apply CZ to (q0, q1, q2, q3, q4);
    apply X to ~;
    apply H to ~;
    println("    ✅ Diffusion 완료");
}

fn grover_iteration(iter_num) {
    println("  --- Grover 반복 {} ---", iter_num);
    oracle_10101();
    diffusion();
}

fn main() {
    println("🌟 회로 내부 함수 호출 및 반복문 테스트");
    println("=====================================");
    println("");
    
    circuit GroverWithFunctions(5) {
        println("🚀 회로 시작");
        
        // 초기화
        println("📦 초기화: 균등 중첩 상태");
        apply H to ~;
        
        // 🔑 핵심 테스트 1: 회로 내부에서 for 반복문
        println("🔄 for 반복문 테스트 시작");
        for iteration in 0..4 {
            println("반복 번호: {}", iteration);
            
            // 🔑 핵심 테스트 2: 회로 내부에서 함수 호출
            grover_iteration(iteration);
        }
        
        println("✅ 회로 완료");
    }
    
    println("회로 생성 중...");
    grover = GroverWithFunctions();
    
    println("측정 중...");
    result = measure(grover, [0, 1, 2, 3, 4]);
    
    decimal = result[0] + result[1]*2 + result[2]*4 + result[3]*8 + result[4]*16;
    
    println("");
    println("🏆 최종 결과:");
    println("============");
    println("측정값: {}", result);
    println("십진수: {}", decimal);
    
    if (decimal == 21) {
        println("✅ 성공! |10101⟩ 발견!");
        println("🎉 회로 내부 함수 호출 및 반복문 성공!");
    } else {
        println("❌ 다른 상태: {}", decimal);
    }
    
    println("");
    println("🎯 테스트 완료:");
    println("==============");
    println("✅ 회로 내부 for 반복문");
    println("✅ 회로 내부 함수 호출");
    println("✅ 중첩된 함수 호출");
    println("✅ 반복문 + 함수 조합");
}