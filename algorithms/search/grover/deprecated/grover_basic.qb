// Grover 검색 알고리즘 - 최소 호환 버전
// 기존 시스템 문법에 완전히 맞춘 버전

fn main() {
    println("🔍 Grover 검색 알고리즘 (최소 버전)");
    println("=================================");
    
    // 간단한 Grover 시뮬레이션
    simple_grover_demo();
}

fn simple_grover_demo() {
    println("🎯 Grover 알고리즘 개념 시연:");
    println("");
    
    // 일반적인 검색과 비교
    println("1. 고전적 검색:");
    println("   4개 항목 중 하나 찾기 = 평균 2회 시도");
    
    println("");
    println("2. Grover 양자 검색:");
    println("   4개 항목 중 하나 찾기 = 1회 반복");
    
    println("");
    println("🔬 양자 회로 실행:");
    
    // 기존 스타일과 동일한 회로
    circuit GroverDemo(2) {
        println("  단계 1: 초기화 - 모든 상태를 동일 확률로");
        apply H to q0;
        apply H to q1;
        
        println("  단계 2: Oracle - 목표 상태 |11⟩에 표시");
        apply Z to q0;
        apply Z to q1;
        apply CNOT to (q0, q1);
        apply Z to q1;
        apply CNOT to (q0, q1);
        
        println("  단계 3: Diffusion - 진폭 증폭");
        apply H to q0;
        apply H to q1;
        apply X to q0;
        apply X to q1;
        apply CNOT to (q0, q1);
        apply Z to q1;
        apply CNOT to (q0, q1);
        apply X to q0;
        apply X to q1;
        apply H to q0;
        apply H to q1;
        
        println("  단계 4: 완료!");
    }
    
    println("");
    println("✅ Grover 회로 실행 완료!");
    println("");
    
    // 결과 설명
    explain_results();
}

fn explain_results() {
    println("📊 Grover 알고리즘 결과 해석:");
    println("============================");
    println("");
    
    println("이론적 결과:");
    println("- |00⟩ 확률: ~6%");
    println("- |01⟩ 확률: ~6%"); 
    println("- |10⟩ 확률: ~6%");
    println("- |11⟩ 확률: ~81% ← 목표 상태!");
    println("");
    
    println("💡 핵심 아이디어:");
    println("1. 중첩으로 모든 가능성을 동시 탐색");
    println("2. Oracle이 정답에 '표시' 추가");
    println("3. Diffusion이 정답 확률을 증폭");
    println("4. 측정 시 높은 확률로 정답 발견");
    println("");
    
    performance_comparison();
}

fn performance_comparison() {
    println("⚡ 성능 비교:");
    println("=============");
    println("");
    
    println("데이터베이스 크기별 검색 횟수:");
    println("항목 수  │ 고전적 평균 │ Grover 반복 │ 속도 향상");
    println("──────────────────────────────────────────");
    println("    4    │      2      │      1      │    2배");
    println("   16    │      8      │      2      │    4배");
    println("   64    │     32      │      4      │    8배");
    println("  256    │    128      │      8      │   16배");
    println(" 1024    │    512      │     16      │   32배");
    println("");
    
    println("🚀 백만 개 항목 데이터베이스:");
    println("   고전적: 평균 500,000회 검색");
    println("   Grover: 약 1,000회 양자 연산");
    println("   → 500배 속도 향상!");
    println("");
    
    real_world_applications();
}

fn real_world_applications() {
    println("🌍 실제 응용 분야:");
    println("=================");
    println("");
    
    println("1. 데이터베이스 검색:");
    println("   - 고객 정보 검색");
    println("   - 재고 관리 시스템");
    println("   - 도서관 카탈로그");
    println("");
    
    println("2. 암호학:");
    println("   - 암호 키 검색");
    println("   - 해시 함수 역산");
    println("   - 암호 해독 가속화");
    println("");
    
    println("3. 최적화 문제:");
    println("   - 경로 최적화");
    println("   - 자원 배분");
    println("   - 스케줄링");
    println("");
    
    println("4. 기계학습:");
    println("   - 특징 선택");
    println("   - 하이퍼파라미터 최적화");
    println("   - 패턴 인식");
    println("");
    
    conclusion();
}

fn conclusion() {
    println("🎓 Grover 알고리즘 요약:");
    println("=======================");
    println("");
    
    println("핵심 원리:");
    println("• 양자 중첩으로 모든 상태 동시 처리");
    println("• Oracle 함수로 해답 표시");
    println("• Diffusion 연산자로 확률 증폭");
    println("• O(√N) 복잡도로 제곱근 속도 향상");
    println("");
    
    println("장점:");
    println("• 모든 검색 문제에 적용 가능");
    println("• 이론적으로 최적의 성능");
    println("• 다른 양자 알고리즘의 기초");
    println("");
    
    println("한계:");
    println("• 해답 개수를 미리 알아야 함");
    println("• Oracle 구현의 복잡성");
    println("• 양자 에러에 민감");
    println("");
    
    println("🚀 다음 단계: Shor 알고리즘, QAOA 등으로 확장!");
}