// 수정된 N큐빗 범용 Grover 검색 알고리즘
// 문자열 연결 문제 해결 버전

// 최적 반복 횟수 계산 함수 (π√N/4 근사)
fn calculate_optimal_iterations(n_qubits: int) -> int {
    search_space = 1;
    i = 0;
    while (i < n_qubits) {
        search_space = search_space * 2;
        i = i + 1;
    }
    
    // π√N/4 근사 계산 (정수로)
    sqrt_n = 1;
    temp = search_space;
    
    // 간단한 정수 제곱근 계산
    while (sqrt_n * sqrt_n < temp) {
        sqrt_n = sqrt_n + 1;
    }
    if (sqrt_n * sqrt_n > temp) {
        sqrt_n = sqrt_n - 1;
    }
    
    // π/4 ≈ 0.785 근사 → 3/4 = 0.75 사용
    optimal = (sqrt_n * 3) / 4;
    if (optimal < 1) {
        optimal = 1;
    }
    
    return optimal;
}

// N큐빗 목표 상태를 이진 문자열로 변환
fn decimal_to_binary_array(decimal: int, n_qubits: int) -> array {
    binary = [];
    temp = decimal;
    i = 0;
    
    while (i < n_qubits) {
        binary = binary + [temp % 2];
        temp = temp / 2;
        i = i + 1;
    }
    
    return binary;
}

// 이진 배열을 십진수로 변환
fn binary_array_to_decimal(binary: array) -> int {
    decimal = 0;
    power = 1;
    i = 0;
    
    while (i < binary.length) {
        if (binary[i] == 1) {
            decimal = decimal + power;
        }
        power = power * 2;
        i = i + 1;
    }
    
    return decimal;
}

// 5큐빗 Oracle 회로 (|10101⟩ 상태에 위상 뒤집기)
fn create_5qubit_oracle() {
    circuit Oracle5Q(5) {
        // 목표: |10101⟩ = q4=1, q3=0, q2=1, q1=0, q0=1
        // 0인 큐빗에 X 게이트 적용 (일시적으로 1로 만들기)
        apply X to q3;  // q3=0 → 1
        apply X to q1;  // q1=0 → 1
        
        // 5큐빗 제어 Z 게이트 적용 (모든 큐빗이 1일 때 위상 뒤집기)
        apply CZ to (q4, q3, q2, q1, q0);
        
        // X 게이트 복원 (0이었던 큐빗을 다시 0으로)
        apply X to q3;  // q3=1 → 0
        apply X to q1;  // q1=1 → 0
    }
    
    return Oracle5Q(5);
}

// 5큐빗 Diffusion 연산자 (평균 중심 반사)
fn create_5qubit_diffusion() {
    circuit Diffusion5Q(5) {
        // 1. H 게이트로 |+⟩ → |0⟩
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        
        // 2. |00000⟩ 상태에 위상 뒤집기 (모든 큐빗에 X 적용 후 제어 Z)
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        
        // 5큐빗 제어 Z 게이트
        apply CZ to (q4, q3, q2, q1, q0);
        
        // 3. X 게이트 복원
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        
        // 4. H 게이트로 |0⟩ → |+⟩
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
    }
    
    return Diffusion5Q(5);
}

// 5큐빗 완전한 Grover 알고리즘
fn create_5qubit_grover() {
    circuit Grover5Q(5) {
        // 1. 초기화: 모든 큐빗에 H 게이트 (균등 중첩)
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        
        // 2. Grover 반복 (Oracle + Diffusion)
        // 5큐빗의 최적 반복 횟수: 4회
        
        // === 1번째 반복 ===
        // Oracle: |10101⟩ 상태에 위상 뒤집기
        apply X to q3;
        apply X to q1;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q3;
        apply X to q1;
        
        // Diffusion: 평균 중심 반사
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        
        // === 2번째 반복 ===
        apply X to q3;
        apply X to q1;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q3;
        apply X to q1;
        
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        
        // === 3번째 반복 ===
        apply X to q3;
        apply X to q1;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q3;
        apply X to q1;
        
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        
        // === 4번째 반복 ===
        apply X to q3;
        apply X to q1;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q3;
        apply X to q1;
        
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply CZ to (q4, q3, q2, q1, q0);
        apply X to q0;
        apply X to q1;
        apply X to q2;
        apply X to q3;
        apply X to q4;
        apply H to q0;
        apply H to q1;
        apply H to q2;
        apply H to q3;
        apply H to q4;
    }
    
    return Grover5Q(5);
}

// 메인 함수: 5큐빗 Grover 테스트
fn main() {
    println("🚀 5큐빗 Grover 검색 알고리즘");
    println("============================");
    
    n_qubits = 5;
    target_state = 21;  // |10101⟩ = 1+4+16 = 21
    search_space = 32;  // 2^5
    
    println("큐빗 수: 5");
    println("검색 공간: 32개 상태");
    println("목표 상태: |10101⟩ (십진수: 21)");
    
    optimal_iterations = calculate_optimal_iterations(n_qubits);
    println("최적 반복 횟수: 4회");
    
    classical_probability = 100 / search_space;
    println("고전적 확률: 3.125%");
    println("목표 Grover 성공률: ~85%");
    
    // Grover 회로 생성 및 실행
    println("");
    println("🧪 5큐빗 Grover 알고리즘 실행:");
    println("------------------------------");
    
    grover_circuit = create_5qubit_grover();
    result = grover_circuit.measure();
    
    measured_decimal = binary_array_to_decimal(result);
    
    println("측정 결과:");
    print("큐빗 상태: [");
    print(result[0]);
    print(", ");
    print(result[1]);
    print(", ");
    print(result[2]);
    print(", ");
    print(result[3]);
    print(", ");
    print(result[4]);
    println("]");
    println("십진수 값:");
    println(measured_decimal);
    
    if (measured_decimal == target_state) {
        println("✅ 성공! |10101⟩ 상태 발견");
    } else {
        println("🔄 실패: 다른 상태 측정됨");
    }
    
    println("");
    println("📊 성능 테스트 (10회 시도):");
    println("==========================");
    
    success_count = 0;
    trial = 0;
    
    while (trial < 10) {
        test_circuit = create_5qubit_grover();
        test_result = test_circuit.measure();
        test_decimal = binary_array_to_decimal(test_result);
        
        if (test_decimal == target_state) {
            success_count = success_count + 1;
            println("시도: ✅ 성공");
        } else {
            println("시도: 🔄 실패");
        }
        
        trial = trial + 1;
    }
    
    success_rate = (success_count * 100) / 10;
    println("");
    println("성공 횟수:");
    println(success_count);
    println("실제 성공률 (%):");
    println(success_rate);
    println("성능 향상 (배):");
    performance_gain = success_rate * 32 / 100;  // 32 = 1/0.03125
    println(performance_gain);
    
    if (success_rate > 70) {
        println("🎉 5큐빗 Grover 알고리즘 성공적으로 구현됨!");
        println("💪 양자 가속 달성!");
    } else {
        println("🔧 알고리즘 최적화 필요");
    }
}