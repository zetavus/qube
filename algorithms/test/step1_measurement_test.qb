// Step 1 테스트: 측정 결과 변수 할당
fn main() {
    println("🧪 Step 1 테스트: 측정 결과 변수 할당");
    println("===================================");
    println("");
    
    test_basic_measurement();
    test_hadamard_measurement();
    test_variable_types();
    test_conditional_logic();
    
    println("🎉 Step 1 테스트 완료!");
}

fn test_basic_measurement() {
    println("1️⃣ 기본 측정 테스트:");
    println("   (확정적 상태 측정)");
    
    // |0⟩ 상태 측정 (항상 0이어야 함)
    qubit q0 = |0⟩;
    bit result0 = measure(q0);
    println("   |0⟩ 측정 결과: {}", result0);
    
    // |1⟩ 상태 측정 (항상 1이어야 함)
    qubit q1 = |1⟩;
    bit result1 = measure(q1);
    println("   |1⟩ 측정 결과: {}", result1);
    
    // 결과 검증
    if (result0 == 0) {
        println("   ✅ |0⟩ 측정 성공!");
    } else {
        println("   ❌ |0⟩ 측정 실패!");
    }
    
    if (result1 == 1) {
        println("   ✅ |1⟩ 측정 성공!");
    } else {
        println("   ❌ |1⟩ 측정 실패!");
    }
    
    println("");
}

fn test_hadamard_measurement() {
    println("2️⃣ 하다마드 중첩 상태 측정:");
    println("   (확률적 결과 - 여러 번 시도)");
    
    scalar zeros = 0;
    scalar ones = 0;
    scalar trials = 10;
    
    for i in 0..trials {
        qubit h_qubit = H(|0⟩);
        bit result = measure(h_qubit);
        
        if (result == 0) {
            zeros += 1;
        } else {
            ones += 1;
        }
        
        println("   시도 {}: {}", i + 1, result);
    }
    
    println("   ──────────────────");
    println("   총 {}회 시도", trials);
    println("   0 결과: {}번", zeros);
    println("   1 결과: {}번", ones);
    
    scalar ratio = ones / trials;
    println("   1의 비율: {:.2f}", ratio);
    println("   이론값: 0.50 (50%)");
    
    if (ratio > 0.2 && ratio < 0.8) {
        println("   ✅ 합리적인 확률 분포!");
    } else {
        println("   ⚠️  예상과 다른 분포 (확률적 변동일 수 있음)");
    }
    
    println("");
}

fn test_variable_types() {
    println("3️⃣ 변수 타입 처리 테스트:");
    
    // bit 변수 직접 선언
    bit my_bit = 0;
    println("   초기 bit 변수: {}", my_bit);
    debug_var("my_bit");
    
    // 측정 결과로 bit 변수 업데이트
    qubit test_qubit = |1⟩;
    my_bit = measure(test_qubit);
    println("   측정 후 bit 변수: {}", my_bit);
    debug_var("my_bit");
    
    // 다른 타입 변수와 비교
    scalar my_scalar = 42;
    debug_var("my_scalar");
    
    println("   ✅ 타입 시스템 정상 동작!");
    println("");
}

fn test_conditional_logic() {
    println("4️⃣ 조건부 로직 테스트:");
    println("   (측정 결과로 분기 실행)");
    
    scalar test_count = 5;
    scalar success_predictions = 0;
    
    for i in 0..test_count {
        // |0⟩ 상태로 예측 가능한 결과
        qubit predictable = |0⟩;
        bit result = measure(predictable);
        
        println("   테스트 {}: 측정 결과 = {}", i + 1, result);
        
        // 조건부 실행
        if (result == 0) {
            println("     → 예상대로 0 측정됨");
            success_predictions += 1;
        } else {
            println("     → 예상과 다름 (1 측정됨)");
        }
    }
    
    println("   ──────────────────");
    println("   성공적 예측: {}/{}", success_predictions, test_count);
    
    if (success_predictions == test_count) {
        println("   ✅ 조건부 로직 완벽 동작!");
    } else {
        println("   ❌ 조건부 로직에 문제 있음");
    }
    
    println("");
}

// 보너스: 간단한 2큐빗 테스트
fn test_two_qubit() {
    println("🏆 보너스: 2큐빗 측정 테스트:");
    
    qubit q0 = |0⟩;
    qubit q1 = |1⟩;
    
    bit r0 = measure(q0);
    bit r1 = measure(q1);
    
    println("   큐빗 0 측정: {}", r0);
    println("   큐빗 1 측정: {}", r1);
    
    // 2비트 값 계산
    scalar combined = r0 * 2 + r1;
    println("   조합된 상태: |{}{}⟩ = {}", r0, r1, combined);
    
    if (combined == 1) {  // |01⟩
        println("   ✅ 예상 상태 |01⟩ 달성!");
    }
}